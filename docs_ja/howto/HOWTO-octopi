=========================================================================
        Octopi の使い方
=========================================================================
○機能概要

  - octopid (VxLAN extender daemon) は VxLAN の BUM トラッフィクを中継
    することで IP Multicast Routing 無しで、ルーターを超えて通信を可能
    にする。

  - VxLAN は Ether/UDP により仮想ローカルネットワークを作成する技術
    UDP パケットなのでルーターを超えて通信できるため広域接続も可能だが、
    Broadcast, Unnown Unicast, Multicast (BUM トラフィック)を、ルーター
    を超えて通信するには特別な配慮が必要となる。

  - VxLAN の Multicast, Broadcast, Unknown Unicast は通常 IP Multicast 
    上にカプセル化して送信される。このためロカールネットワーク外と通信
    するためには IP Multicast Routing の設定が必要になる。

  - 一方で IP Multicast Routing はルーターの設定など運用に手間がかかり、
    機器の容量に制限されてスケールアウトしないという問題がある。 また
    ネットワークが大規模化した場合に Multicast によって帯域が圧迫される
    される可能性がある。

  - これらの問題点に対応するために octopid は IP Multicast Routing を
    使用せずに VxLAN の BUM トラッフィクを独自に中継する VxLAN Switch
    を提供する。


○プログラム構成

  - Ocotpi VxLAN extender は octopid デーモンと、octopi コマンドの二つ
    のプログアムからなる。

  - octopi コマンドは設定やルールの追加、削除、確認用の CLI を提供する。

  - octopid はデーモンとして、機能別の以下の複数のプロセスにフォークして
    パケットの中継などを行なう

  octopi-launcher   他のプロセスを子プロセスとして起動、終了したら再起動する
  octopi-snipper    ネットワークを監視し VxLAN の BUM パケットを取得する
  octopi-dispatcher ルールを参照して中継先を決定し送り出す
  octopi-caster     中継されたパケットをローカルにブロードキャストする
  octopi-logger     定期的に統計情報をログに出力する
  octopi-listener   ルール同期 API サーバー
  octopi-kicker     ルール同期クライアントを定期的に起動する
  octopi-talker     ルール同期クライアント


○ファイル構成

  /opt/octopi/etc/octopi.conf       設定ファイル
  /var/octopi/octopidb              ルール DB ファイル
  /var/octopi/octopiqueue           ルール同期キュー


○ネットワーク構成

  - VxLAN は下層ネットワークとして全てのノード間で互いに通信できる IP 
    ネットワーク上に複数の仮想ロカールネットワークを構築する技術である。

  - 本来は物理セグエメントを超える通信には IP Multicast Routing を使用
    するが、octopi はこれにかわって、物理セグメント越える VxLAN 通信を
    提供うる。

  - 各物理セグメントに octopid を一つずつ起動し、octopid どうしで通信
    することにより、VxLAN の IP Multicast パケットを中継する。

  - octopid で交換するのはあくまで BUM トラフィックのみであり、通常の
    通信は VxLAN の仕組みにより、ノードどうしで直接通信する。


== サンプル ==

   物理ネットワークA                        物理ネットワークB
   +----+----+----+----+----+---- Router ---+----+----+----+----+----+
   |    |    |    |    |    |       |       |    |    |    |    |    |
 node node node node node octopid   |      node node node node node octopid 
                                    |
                                  Router
				    |
                                  Router
                                    |
 node node node node node octopid   |      node node node node node octopid
   |    |    |    |    |    |       |       |    |    |    |    |    |
   +----+----+----+----+----+---- Router ---+----+----+----+----+----+
   物理ネットワークC                        物理ネットワークD

  node:    VxLAN を話すサーバー、ルーター、アプライアンス機器
  octopid: octopi デーモンの起動しているサーバー
  仮に以下のアドレスがついているものとする。
     物理ネットワークA の octopid 10.10.20.8
     物理ネットワークB の octopid 10.10.40.8
     物理ネットワークC の octopid 10.10.60.8     
     物理ネットワークD の octopid 10.10.80.8     
  
- node は普通に VxLAN (multicast mode)を話す機器なら何でも良い。
  機器ごとの特別な設定は必要ない。Linux Sever での VxLAN の使い方は
  MEMO-tutorial-linux-vxlan を参照

- octopid はネットワークを監視して必要なパケットを他の octopid へ中継し、
  受け取った octopid はローカルに multicast を行なう

- octopid がどのパケットをどこに中継するかはルール定義(以下参照)による。


=========================================================================
○初期設定

1. octopi.conf を書き換え

  # cd /opt/octopi/etc
  # cp octopi.conf.sample octopi.conf
  # vi octopi.conf
  	interface eth0        # 適切なインターフェイスに書き換える
	address 192.168.10.11 # 適切なアドレスに書き換える(もしくはコメント化)

  - その他の設定について doc/manual/MEMO-config を参照


2. ルールDBの初期化

  - プールサイズは必要ルール数の10倍程度を指定する。(10万ルール だと 1000000)
  - ハッシュサイズはVNI数の2倍以上の素数を指定する。(10万VNI だと 213131)
  - 上記の octopi.conf に書いてあれば数値を使うので省略可

  # octopi init 100,000 213,131
  
  - グループを変更して管理ユーザからアクセスできるようにしておくと便利

  # chgrp admin /var/octopi/octopidb
  # chmod g+rw /var/octopi/octopidb


3. daemon の起動

  - 通常はオプション等を指定する必要はない
  - その他詳しい起動オプションは doc/manual/MEMO-usage を参照
  - 注意: octopid を起動するサーバには VxLAN の設定をしないこと

  # /opt/octopi/sbin/octopid


4. 起動したことを確認

  # ps axf | grep octopi
    11440 ?        S      0:00 octopi-launcher
    11443 ?        S      0:00  \_ octopi-snipper
    11444 ?        S      0:00  \_ octopi-dispatcher
    11445 ?        S      0:00  \_ octopi-dispatcher
    11446 ?        S      0:00  \_ octopi-dispatcher
    11447 ?        S      0:00  \_ octopi-dispatcher
    11448 ?        S      0:00  \_ octopi-dispatcher
    11449 ?        S      0:00  \_ octopi-dispatcher
    11450 ?        S      0:00  \_ octopi-dispatcher
    11451 ?        S      0:00  \_ octopi-dispatcher
    11452 ?        S      0:00  \_ octopi-caster
    11453 ?        S      0:00  \_ octopi-caster
    11454 ?        S      0:00  \_ octopi-caster
    11455 ?        S      0:00  \_ octopi-caster
    11456 ?        S      0:00  \_ octopi-logger


○仮想サーバ
  - 仮想サーバ内で octopi を使用する場合、ハイパーバイザーの種類によっ
    ては IP Multicast パケットが仮想サーバまで届かない可能性がある。
    仮想サーバ内で以下のコマンドで実行することで解決することもある。

  # ip maddress add 01:00:5E:XX:XX:XX dev eth0

  - ここで XX:XX:XX は IP Multicast Address の下位23ビット

  - eth0 はマルチキャストを監視するインターフェイス

  - または下層ネットワークに IPv6 を使用する場合は

  # ip maddress add 33:33:XX:XX:XX:XX dev eth0

  - ここの XX:XX:XX:XX は IPv6 Multicast Address の下位32ビット


○自動起動 (systemd)

  - 通常はサーバが起動した時に自動起動するように設定をする。

  # vi /etc/systemd/system/octopid.service
	[Unit]
	Description=Octopi VxLAN Extender
	After=syslog.target network-online.target
	Wants=network-online.target
	ConditionFileNotEmpty=/opt/octopi/etc/octopi.conf

	[Service]
	Type=forking
	KillMode=process
	ExecStart=/opt/octopi/sbin/octopid

	[Install]
	WantedBy=multi-user.target

  # systemctl daemon-reload
  # systemctl enable octopid
  # systemctl start octopid


=========================================================================

==== 設定サンプル1: 単純方式

  - 全ての VxLAN Multicast の全ての octopid に中継する方式

  - ネットワーク接続が小規模な場合に向いている

  - この方式は、一度設定すると、あとは放置で良いので運用は楽

  - ただし接続ネットワーク数が多くなってくると、遅延や帯域の占有が問
    題になるかもしれない。その場合は以下の方式を推奨

○ルールの追加
- 上記のネットワークにおいて全ての octopid に以下のルールを設定する

  # octopi add any default  10.10.20.8 10.10.40.8 10.10.60.8 10.10.80.8
  # octopi add any default6 10.10.20.8 10.10.40.8 10.10.60.8 10.10.80.8 

  - このルールの追加は全ての VNI の全てのマルチキャスト・パケットを、
    他の octopid で中継することを指示している

  - octopid add (VNI番号) 対象アドレス 転送先 [転送先...] という形式
    - ここで any は対象の VNI 番号だが、未定義の全ての VNI にマッチする
    - default は全ての IPv4 アドレスにマッチする(0.0.0.0/0 と同じ)
    - default6 は全ての IPv6 アドレスにマッチする(::/0 と同じ)
    - 10.10.20.1, 10.10.40.1, 10.10.60.1, 10.10.80.1 は、octopid の
      アドレス。自分自身のアドレスも記述すして良い


=========================================================================

==== 設定サンプル2: ネットワーク指定方式

  - 個別の VNI ごとに構成するネットワークを指定する。

  - VNI が増えたり、VNI に参加するネットワーク構成が変わった時にはルー
    ル変更が必要となるが、個別のホスト単位での指定は必要ない。

  - 全体では多数のネットワークがあるが VNI ごとの数が少ない場合に向いている

○ルール追加

  # octopi add 100 default 10.10.20.8 10.10.40.8
  # octopi add 200 default 10.10.20.8 10.10.60.8
  # octopi add 300 default 10.10.40.8 10.10.60.8 10.10.80.8 
  # octopi add  ...

  - IPv6 を使用する場合は合わせて default6 も設定する。
  - VNI ごとに参加先を限定できるので余計なパケットが送られなくて済む


=========================================================================

==== 設定サンプル3: ノード指定方式

  - 上記の方式では、ネットワーク単位で octopid にパケットの中継先を指定
    いしてたが ARP でも Unknown Unicast でも本来受け取るべき相手は一カ
    所だけ。

  - どこにいるか予め知っていれば、送り先を1か所のみにでき、遅延や帯域の
    占有を防ぐことができる。

○ルールの追加

  # octopi add 100 192.168.20.71 10.10.40.8
  # octopi add 100 192.168.20.72 10.10.60.8
  # octopi add 100 192.168.20.73 10.10.40.8
  # octopi add 100 ...

  - この設定は VNI 100 において 192.168.20.71 を持つサーバはネットワークB
    にいるので、ネットワーク B の octopid (10.10.40.8) にだけ中継すれば良
    い等を指定している.

  - 以下のように CIDR 形式でまとめて指定することもできる。この場合は最長
    一致(Longest Path Matching)により中継先が選択される

  # octopi add 100 192.168.0.0/16     10.10.40.8
  # octopi add 100 192.168.30.0/24    10.10.60.8
  # octopi add 100 192.168.30.64/28   10.10.20.8


=========================================================================
○ルールDBの追加する (サンプル)

  - VNI 150 の 10.99.10.21 を octopid(192.168.77.15) に中継する

  # octopi add  150  10.99.10.21/32   192.168.77.15
                ---  --------------   --------------
	        VNI  CIDR(仮想ネット) 転送先octopi

  - 上記の設定を削除する

  # octopi delete  150  10.99.10.21/32   192.168.77.15


  - VNI 150 の 10.99.10.21 をネットワーク間移動し 192.168.77.19 に
    中継する

  # octopi move 150 10.99.10.21/32 192.168.77.19
  ※ ライブマイグレーションの項目も参照


  - VNI 150 のルール設定を確認する

  # octopi list 150


  - VNI 150 のルールツリー(内部状態)を確認する

  # octopi show 150


  - 設定全てをセーブファイルに書き出す

  # octopi save > savefile


  - セーブファイルから設定を復元する(ファイルにないデータは削除される)

  # cat savefile | octopi restore 


  - セーブファイルを現在の設定に上書きマージする

  # cat savefile | octopi update


  - VNI 150 の全ルールを削除する

  # octopi flush 150


○ 特殊なルール表記

  - 対象に "default" を指定すると 0.0.0.0/0 で全ての IPv4 にマッチ
  - 対象に "default6" を指定すると ::/0 で全ての IPv6 にマッチ  

  - 中継先に "drop" を指定すると、どこにも中継しない
  - 中継先に "broadcast" を指定すると、VNIにある全サイトに中継する

  - VNIに "any" にを指定するとワイルドカード
    VNI が未定義の場合に "any" フォールバックする


○ 運用コマンド

   - 全ルールを一時停止し非中継(バックアップ)モードにする
   # octopi pause

   - 一時停止を解除し中継(アクティブ)モードにする
   # octopi unpause

   - メモリ内のルールDBの内容をファイルに同期書き出す (通常の運用では
     必要ない)
   # octopi sync

    - 破損したルールDBを自動修復する (通常の運用では必要ない)
    # octopi fsck

=========================================================================

○仮想サーバのライブ・マイグレーション

  - ライブ・マイグレーションで仮想ホストを別の物理ネットワークに移動
    させる場合には以下の手順を取ると良い
  - 以下の例では VNI 100 の 192.168.20.80 を、octopid(10.10.20.8)の
    ネットワークから、octopid(10.10.80.8)のネットワークに移動する

1. 移動元を確認
   # octopi list 100
   ...
   octopi add  100 192.168.20.80  10.10.20.8
   ...

2. 移動先を追加し、両方に転送されていることを確認
   # octopi add  100 192.168.20.80  10.10.80.8 
   # octopi list 100
   ...
   octopi add  100 192.168.20.80  10.10.20.8 10.10.60.8
   ...

3. ライブ・マイグレーションヲ実施
   # strat-live-migratuion 

4. 移動元を削除
   # octopi delete  100 192.168.20.80  10.10.20.8


=========================================================================

○セキュリティー考察

  - VxLAN では基本的に対象のノードどうしで peer to peer で通信を行ない、
    octopid は BUM パケットを中継すに過ぎない、このため VxLAN ネット
   ワークの安全度は下層ネットワークに安全度に依存している。

  - 下層ネットワークにプライベート・ネットワークを使用した場合は、上層
    の VxLAN ネットワークのセキュリティはそのプライベート・ネットーワー
    クと同じなる。下層ネットワークにグローバルを使用した場合は、グロー
    バルと同じレベルになる。

  - octopid 自身にには secret と timeout という二つのセキュリティに関
    する仕組みがあるが、これらは完全な安全性を保証するものではなく、設
    定ミスなや機器障害などへの対策を目的とした簡易なものである。

  - octopi.conf に secret を設定することにより、中継パケットに MD5 で
   サインを行ない、受信側でそれをチェックして一致しない場合には破棄する。
   宛先を間違えたり、カジュアルに偽造したパケットの中継を防ぐことができる。
   チェックサムの計算に CPU を必要とするためパフォーマンスが低下する欠陥
   がある。

  - octopi,conf に timeout (ミリ秒単位)を設定することにより、中継にそれ
    以上の時間を擁したパケットを破棄する。リピート攻撃や迷子でネットに
    残留したパケットを防ぐことができる。ホストの時計がズレていたり、
    ネットワーク混雑で遅延した場合にパケットを中継できなくなる欠陥がある。

=========================================================================
